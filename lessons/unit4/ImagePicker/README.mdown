# AC-iOS Using Apple's UIImagePickerController (Swift 4.x)

### Readings
1. [Apple Docs on UIImagePickerController](https://developer.apple.com/documentation/uikit/uiimagepickercontroller)
2. [Example ImagePicker Exercise](https://makeapppie.com/2016/06/28/how-to-use-uiimagepickercontroller-for-a-camera-and-photo-library-in-swift-3-0/)
3. [Accessing the Camera / Photo Library](https://theappspace.com/swift-access-ios-camera-photo-library/)
4. [Signing Apps With a Free Dev Account](https://apple.stackexchange.com/questions/206123/xcode-7-develop-for-ios-without-developer-account)

---
### 0. Objectives

1. Become familiar with the `UIImagePickerController`
2. Understand how to use the UIIPC to interact with the camera and photo library
3. Learn about developer accounts and how to build apps on a physical iOS device 

---
### Everybody Loves Selfies

### `UIImagePickerController`: Apple's simple camera utility for iOS

The intended use of `UIImagePickerController` is pretty clear from the name: You might want to access the user's camera or pictures. It is Apple's high-level interface, i.e. easiest to use, and so comes with limitations. You get the familiar Photo Library picker in portrait mode only. The camera can be customized with an overlay. Instead, you store the user's preference for using "night mode" in `UserDefaults` and then every time your app launches you retrieve that stored information and update your app before it finishes launching.

From [Apple](https://developer.apple.com/reference/uikit/uiimagepickercontroller)

> The UIImagePickerController class manages customizable, system-supplied user interfaces for taking 
> pictures and movies on supported devices, and for choosing saved images and movies for use in 
> your app. An image picker controller manages user interactions and delivers the results of those 
> interactions to a delegate object.

### Overlay View

Overlay view is the only customization feature available in the UIImagePickerController. If set,
you can define a custom view to overlay during camera operation. You probably want to turn off
the built in camera controls in this case. This is done by setting ```showsCameraControls```.


### ```showsCameraControls```

> var showsCameraControls: Bool { get set }

> Description	
> Indicates whether the image picker displays the default camera controls.
The default value of this property is true, which specifies that the default camera controls are visible in the picker. Set it to false to hide the default controls if you want to instead provide a custom overlay view using the cameraOverlayView property.

> Note
>In iOS 3.1.3 and earlier, hiding the default camera controls limits you to taking still pictures only, regardless of whether movie capture is available on the device.
>
> If you set this property to false and provide your own custom controls, you can take multiple pictures before dismissing the image picker interface. However, if you set this property to true, your delegate must dismiss the image picker interface after the user takes one picture or cancels the operation.
>
> You can access this property only when the source type of the image picker is set to camera. Attempting to access this property for other source types results in the throwing of an invalidArgumentException exception. Depending on the value you assign to the mediaTypes property, the default controls display the still camera or movie camera interface, or a selection control that lets the user choose the picker interface.

### Info.plist keys

As we've seen with other privacy settings like accessing the user's location, we also need to 
ask permission to access the camera or the photo library.

```xml
	<key>NSCameraUsageDescription</key>
	<string>to take photos and video</string>
	<key>NSPhotoLibraryUsageDescription</key>
	<string>to save photos and videos</string>
```
